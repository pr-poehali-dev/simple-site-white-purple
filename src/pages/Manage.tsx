import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';

const ADMIN_PASSWORD = "210212251277";
const API_URL = "https://functions.poehali.dev/828e1e69-52be-411c-9b7c-26486b3b2d8e";

interface Greeting {
  id: string;
  message: string;
}

export default function Manage() {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [showPasswordDialog, setShowPasswordDialog] = useState(true);
  const [password, setPassword] = useState('');
  const [passwordError, setPasswordError] = useState(false);
  const [greetings, setGreetings] = useState<Greeting[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [newGreetingId, setNewGreetingId] = useState('');
  const [showCreateDialog, setShowCreateDialog] = useState(false);

  useEffect(() => {
    if (isAuthenticated) {
      loadGreetings();
    }
  }, [isAuthenticated]);

  const handlePasswordSubmit = () => {
    if (password === ADMIN_PASSWORD) {
      setIsAuthenticated(true);
      setShowPasswordDialog(false);
      setPassword('');
      setPasswordError(false);
    } else {
      setPasswordError(true);
    }
  };

  const loadGreetings = async () => {
    try {
      const response = await fetch(`${API_URL}?action=list`, {
        headers: {
          'X-Auth-Token': ADMIN_PASSWORD
        }
      });
      const data = await response.json();
      setGreetings(data.greetings || []);
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateGreeting = async () => {
    if (!newGreetingId.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏",
        variant: "destructive"
      });
      return;
    }

    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Auth-Token': ADMIN_PASSWORD
        },
        body: JSON.stringify({
          id: newGreetingId,
          message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
          imageUrl: 'https://cdn.poehali.dev/projects/5575572e-9552-4ad2-b010-e12c5cc8067f/files/75543a6c-c893-4198-a0ba-6b48e331eb86.jpg'
        })
      });

      if (response.ok) {
        toast({
          title: "–°–æ–∑–¥–∞–Ω–æ!",
          description: "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å–æ–∑–¥–∞–Ω–∞",
        });
        setNewGreetingId('');
        setShowCreateDialog(false);
        loadGreetings();
      }
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Å–∏—é",
        variant: "destructive"
      });
    }
  };

  const handleSetAsDefault = (id: string) => {
    localStorage.setItem('deviceGreetingId', id);
    toast({
      title: "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
      description: `–í–µ—Ä—Å–∏—è "${id}" —Ç–µ–ø–µ—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ`,
    });
  };

  const handleCopyLink = (id: string) => {
    const url = `${window.location.origin}/?id=${id}`;
    navigator.clipboard.writeText(url);
    toast({
      title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
      description: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
    });
  };

  if (!isAuthenticated) {
    return (
      <Dialog open={showPasswordDialog} onOpenChange={() => navigate('/')}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="text-2xl font-bold text-center">–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</DialogTitle>
            <DialogDescription className="text-center">
              –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–µ—Ä—Å–∏—è–º–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <Input
              type="password"
              value={password}
              onChange={(e) => {
                setPassword(e.target.value);
                setPasswordError(false);
              }}
              onKeyPress={(e) => e.key === 'Enter' && handlePasswordSubmit()}
              placeholder="–ü–∞—Ä–æ–ª—å"
              className={`text-center text-lg ${passwordError ? 'border-destructive' : ''}`}
            />
            {passwordError && (
              <p className="text-sm text-destructive text-center">–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</p>
            )}
            <Button 
              onClick={handlePasswordSubmit}
              className="w-full bg-primary hover:bg-primary/90 text-white font-medium"
            >
              <Icon name="Lock" size={18} className="mr-2" />
              –í–æ–π—Ç–∏
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-secondary via-white to-primary/10 p-6">
      <Card className="w-full max-w-4xl p-8 shadow-xl border-2 border-primary/20">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏
          </h1>
          <div className="flex gap-3">
            <Button
              onClick={() => setShowCreateDialog(true)}
              className="bg-primary hover:bg-primary/90 text-white"
            >
              <Icon name="Plus" size={18} className="mr-2" />
              –°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Å–∏—é
            </Button>
            <Button
              onClick={() => navigate('/')}
              variant="outline"
              size="sm"
              className="border-2 border-primary text-primary hover:bg-secondary"
            >
              <Icon name="ArrowLeft" size={18} className="mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
          </div>
        </div>

        {isLoading ? (
          <div className="text-center py-12">
            <Icon name="Loader2" size={48} className="animate-spin mx-auto text-primary" />
          </div>
        ) : (
          <div className="space-y-4">
            {greetings.length === 0 ? (
              <p className="text-center text-muted-foreground py-8">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π</p>
            ) : (
              greetings.map((greeting) => (
                <Card key={greeting.id} className="p-6 border-2 border-primary/20 hover:border-primary/40 transition-all">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <h3 className="text-xl font-bold text-foreground mb-2">
                        {greeting.id === 'default' ? 'üè† ' : ''}
                        {greeting.id}
                      </h3>
                      <p className="text-muted-foreground">{greeting.message}</p>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        onClick={() => navigate(`/?id=${greeting.id}`)}
                        variant="outline"
                        size="sm"
                        className="border-primary text-primary hover:bg-secondary"
                      >
                        <Icon name="Eye" size={16} className="mr-2" />
                        –û—Ç–∫—Ä—ã—Ç—å
                      </Button>
                      <Button
                        onClick={() => handleCopyLink(greeting.id)}
                        variant="outline"
                        size="sm"
                        className="border-primary text-primary hover:bg-secondary"
                      >
                        <Icon name="Link" size={16} className="mr-2" />
                        –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
                      </Button>
                      <Button
                        onClick={() => handleSetAsDefault(greeting.id)}
                        variant="outline"
                        size="sm"
                        className="border-primary text-primary hover:bg-secondary"
                      >
                        <Icon name="Home" size={16} className="mr-2" />
                        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                      </Button>
                    </div>
                  </div>
                </Card>
              ))
            )}
          </div>
        )}

        <div className="mt-6 p-4 bg-blue-50 rounded-lg border-2 border-primary/20">
          <h3 className="font-bold text-foreground mb-2 flex items-center gap-2">
            <Icon name="Info" size={18} />
            –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
          </h3>
          <ul className="text-sm text-muted-foreground space-y-1">
            <li>‚Ä¢ –ö–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∏–¥–∏—Ç —Å–≤–æ—é –≤–µ—Ä—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</li>
            <li>‚Ä¢ –° –ø–∞—Ä–æ–ª–µ–º –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ</li>
            <li>‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å ID —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π</li>
            <li>‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</li>
          </ul>
        </div>
      </Card>

      <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle className="text-2xl font-bold text-center">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é</DialogTitle>
            <DialogDescription className="text-center">
              –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <Input
              value={newGreetingId}
              onChange={(e) => setNewGreetingId(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: anna, vova, family..."
              className="text-center text-lg"
            />
            <div className="flex gap-3">
              <Button 
                onClick={handleCreateGreeting}
                className="flex-1 bg-primary hover:bg-primary/90 text-white font-medium"
              >
                <Icon name="Plus" size={18} className="mr-2" />
                –°–æ–∑–¥–∞—Ç—å
              </Button>
              <Button 
                onClick={() => {
                  setShowCreateDialog(false);
                  setNewGreetingId('');
                }}
                variant="outline"
                className="flex-1 border-2 border-primary text-primary hover:bg-secondary"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
